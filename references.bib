
@misc{noauthor_first-person_2024,
	title = {First-person (video games)},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=First-person_(video_games)&oldid=1218717225},
	abstract = {In video games, first-person (also spelled first person) is any graphical perspective rendered from the viewpoint of the player character, or from the inside of a device or vehicle controlled by the player character. It is one of two perspectives used in the vast majority of video games, with the other being third-person, the graphical perspective from outside of any character (but possibly focused on a character); some games such as interactive fiction do not belong to either format.
First-person can be used as sole perspective in games belonging of almost any genre; first-person shooters (FPS) are a popular genre in which the graphical perspective is an integral component of the gameplay, although, like third-person shooters, the term has come to define a specific subgenre of shooter games rather than any using the perspective, and several shooter games, while belonging to other subgenres, use a first person perspective, such as, traditionally, light gun shooters, rail shooters, and shooting gallery games. Other genres that typically feature a first person perspective include amateur flight simulations, combat flight simulators, dating sims, driving simulators, visual novels, and walking sims, although it has virtually been used in all genres, either as main perspective or for specific actions or sections.},
	language = {en},
	urldate = {2024-05-09},
	journal = {Wikipedia},
	month = apr,
	year = {2024},
	note = {Page Version ID: 1218717225},
}

@book{hugheshallett_applied_2009,
	address = {Hoboken, NJ},
	edition = {4th Edition},
	title = {Applied {Calculus}},
	isbn = {978-0-470-17052-6},
	language = {English},
	publisher = {John Wiley \& Sons},
	author = {Hughes–Hallett, Deborah and Lock, Patti Frazer and Gleason, Andrew M. and Flath, Daniel E. and Gordon, Sheldon P. and Lomen, David O. and Lovelock, David and McCallum, William G. and Osgood, Brad G. and Pasquale, Andrew and Tecosky–Feldman, Jeff and Thrash, Joseph and Rhea, Karen R. and Tucker, Thomas W.},
	month = dec,
	year = {2009},
}

@article{blinn_simulation_1978,
	title = {Simulation of wrinkled surfaces},
	volume = {12},
	issn = {0097-8930},
	url = {https://dl.acm.org/doi/10.1145/965139.507101},
	doi = {10.1145/965139.507101},
	abstract = {Computer generated shaded images have reached an impressive degree of realism with the current state of the art. They are not so realistic, however, that they would fool many people into believing they are real. One problem is that the surfaces tend to look artificial due to their extreme smoothness. What is needed is a means of simulating the surface irregularities that are on real surfaces. In 1973 Ed Catmull introduced the idea of using the parameter values of parametrically defined surfaces to index into a texture definition function which scales the intensity of the reflected light. By tying the texture pattern to the parameter values, the texture is guaranteed to rotate and move with the object. This is good for showing patterns painted on the surface, but attempts to simulate rough surfaces in this way are unconvincing. This paper presents a method of using a texturing function to perform a small perturbation on the direction of the surface normal before using it in the intensity calculations. This process yields images with realistic looking surface wrinkles without the need to model each wrinkle as a separate surface element. Several samples of images made with this technique are included.},
	number = {3},
	urldate = {2024-05-09},
	journal = {ACM SIGGRAPH Computer Graphics},
	author = {Blinn, James F.},
	month = aug,
	year = {1978},
	pages = {286--292},
}

@inproceedings{nishita_display_1993,
	address = {New York, NY, USA},
	series = {{SIGGRAPH} '93},
	title = {Display of the earth taking into account atmospheric scattering},
	isbn = {978-0-89791-601-1},
	url = {https://dl.acm.org/doi/10.1145/166117.166140},
	doi = {10.1145/166117.166140},
	urldate = {2024-05-09},
	booktitle = {Proceedings of the 20th annual conference on {Computer} graphics and interactive techniques},
	publisher = {Association for Computing Machinery},
	author = {Nishita, Tomoyuki and Sirai, Takao and Tadamura, Katsumi and Nakamae, Eihachiro},
	month = sep,
	year = {1993},
	keywords = {atmospheric scattering, color of water, earth, optical length, photo-realism, radiative transfer, sky light},
	pages = {175--182},
}

@misc{noauthor_chapter_nodate,
	title = {Chapter 16. {Accurate} {Atmospheric} {Scattering}},
	url = {https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-16-accurate-atmospheric-scattering},
	language = {en-US},
	urldate = {2024-05-09},
	journal = {NVIDIA Developer},
}

@article{young_rayleigh_1981,
	title = {Rayleigh scattering},
	volume = {20},
	copyright = {© 1981 Optical Society of America},
	issn = {2155-3165},
	url = {https://opg.optica.org/ao/abstract.cfm?uri=ao-20-4-533},
	doi = {10.1364/AO.20.000533},
	language = {EN},
	number = {4},
	urldate = {2024-05-09},
	journal = {Applied Optics},
	author = {Young, Andrew T.},
	month = feb,
	year = {1981},
	note = {Publisher: Optica Publishing Group},
	keywords = {Extinction, Forward scattering, Raman scattering, Rayleigh scattering, Refractive index, Wavefronts},
	pages = {533--535},
}

@misc{flick_triplanar_nodate,
	title = {Triplanar {Mapping}},
	url = {https://catlikecoding.com/unity/tutorials/advanced-rendering/triplanar-mapping/},
	abstract = {A Unity Advanced Rendering rendering tutorial about triplanar texture mapping.},
	language = {en},
	urldate = {2024-05-01},
	author = {Flick, Jasper},
}

@misc{quilez_ellipsoid_nodate,
	title = {Ellipsoid {SDF}},
	url = {https://iquilezles.org/articles/ellipsoids/},
	abstract = {Articles on computer graphics, math and art},
	language = {en},
	urldate = {2024-04-29},
	author = {Quilez, Inigo},
}

@book{clegg_case_1994,
	address = {USA},
	title = {Case {Method} {Fast}-{Track}: {A} {Rad} {Approach}},
	isbn = {978-0-201-62432-8},
	shorttitle = {Case {Method} {Fast}-{Track}},
	abstract = {From the Book: In writing this book I tried to achieve two different objectives. The first objective was to provide an overview of fast-track, the techniques it applies, and particularly the management challenges it presents. The second objective was to provide a handbook for project managers running fast-track projects. Putting these together might have endangered the second, and more pragmatic objective. This I did not want to do, so the book is split into two distinct parts. Chapters 1 to 3 deal with fast-track in general, Chapter 4 to 7 deal with the life-cycle of a project in more detail, identifying the tasks and their deliverable, the techniques and the tools that support them. These later chapters refer back to the relevant sections of the first part of the book so the descriptions of specific techniques are all gathered together in Chapter 3 and not scattered and duplicated through subsequent chapters. I hope that this structure will mean a casual reader can gain an understanding of the fast-track approach quickly from the first part of the book, and the practitioner can have an organized and compact reference for daily use from the second part. In assembling the second part I frequently found myself adding an extra step or an additional task, for completeness. The result is that, while not all projects will need every step of every task, they are all necessary under some circumstances. Every task is included in a project on the basis of what it produces. If a particular project has no need of the result, for example, documentation of test results, then it should not be produced and the task should be omitted. During the initial planning of a project the template project plan offeredin Chapters 4 to 6 should be assessed and tailored for the project, cutting out the unnecessary tasks and steps. Do not be afraid to prune. The questions to ask are: "Do I need this deliverable to manage the project " and "Does the sponsor value this deliverable above its price " I have used Oracle tools throughout in examples, and in particular I have recommended an approach that exploits the ability of the Oracle CASE tools to define rules once then reuse them many times. Some CASE tools do not exploit reusability in this way, but the trend in development technology is towards greater reusability so it seems very appropriate here. Dai CleggJuly 1994},
	publisher = {Addison-Wesley Longman Publishing Co., Inc.},
	author = {Clegg, Dai and Barker, Richard},
	month = may,
	year = {1994},
}

@misc{quilez_domain_nodate,
	title = {Domain {Repetition}},
	url = {https://iquilezles.org/articles/sdfrepetition/},
	abstract = {Articles on computer graphics, math and art},
	language = {en},
	urldate = {2024-04-29},
	author = {Quilez, Inigo},
}

@misc{quilez_raymarching_nodate,
	title = {Raymarching {Terrain}},
	url = {https://iquilezles.org/articles/terrainmarching/},
	abstract = {Articles on computer graphics, math and art},
	language = {en},
	urldate = {2024-04-29},
	author = {Quilez, Inigo},
}

@misc{team_main_2019,
	title = {The {Main} {Benefits} and {Disadvantages} of {Polygonal} {Modeling}},
	url = {https://blog.spatial.com/the-main-benefits-and-disadvantages-of-polygonal-modeling},
	abstract = {Polygonal (or polyhedral) modeling is the most common type of modeling for video games and animation studios. 
This type of modeling builds 3D objects out of smaller components called “tris” (triangles) or “polys” (polygons).},
	language = {en-us},
	urldate = {2024-05-09},
	author = {Team, Spatial},
	month = dec,
	year = {2019},
}

@incollection{osher_implicit_2006,
	title = {Implicit {Functions}},
	isbn = {978-0-387-22746-7},
	abstract = {Scope, Aims, and Audiences This book, Level Set Methods and Dynamic Implicit Surfaces is designed to serve two purposes: Parts I and II introduce the reader to implicit surfaces and level set methods. We have used these chapters to teach introductory courses on the material to students with little more than a fundamental math background. No prior knowledge of partial di?erential equations or numerical analysis is required. These ?rst eight chapters include enough detailed information to allow students to create working level set codes from scratch. Parts III and IV of this book are based on a series of papers published by us and our colleagues. For the sake of brevity, a few details have been occasionally omitted. These chapters do include thorough explanations and enough of the signi?cant details along with the appropriate references to allow the reader to get a ?rm grasp on the material. This book is an introduction to the subject. We have given examples of the utility of the method to a diverse (but by no means complete) collection of application areas. We have also tried to give complete numerical recipes and a self-contained course in the appropriate numerical analysis. We - lieve that this book will enable users to apply the techniques presented here to real problems.},
	language = {en},
	booktitle = {Level {Set} {Methods} and {Dynamic} {Implicit} {Surfaces}},
	publisher = {Springer Science \& Business Media},
	author = {Osher, Stanley and Fedkiw, Ronald},
	month = apr,
	year = {2006},
	note = {Google-Books-ID: i4bfBwAAQBAJ},
	keywords = {Computers / Optical Data Processing, Computers / Software Development \& Engineering / Computer Graphics, Mathematics / Counting \& Numeration, Mathematics / Numerical Analysis, Mathematics / Probability \& Statistics / Stochastic Processes, Science / Mechanics / General, Science / Mechanics / Solids, Technology \& Engineering / Mechanical},
	pages = {3--16},
}

@incollection{osher_signed_2006,
	title = {Signed {Distance} {Functions}},
	isbn = {978-0-387-22746-7},
	abstract = {Scope, Aims, and Audiences This book, Level Set Methods and Dynamic Implicit Surfaces is designed to serve two purposes: Parts I and II introduce the reader to implicit surfaces and level set methods. We have used these chapters to teach introductory courses on the material to students with little more than a fundamental math background. No prior knowledge of partial di?erential equations or numerical analysis is required. These ?rst eight chapters include enough detailed information to allow students to create working level set codes from scratch. Parts III and IV of this book are based on a series of papers published by us and our colleagues. For the sake of brevity, a few details have been occasionally omitted. These chapters do include thorough explanations and enough of the signi?cant details along with the appropriate references to allow the reader to get a ?rm grasp on the material. This book is an introduction to the subject. We have given examples of the utility of the method to a diverse (but by no means complete) collection of application areas. We have also tried to give complete numerical recipes and a self-contained course in the appropriate numerical analysis. We - lieve that this book will enable users to apply the techniques presented here to real problems.},
	language = {en},
	booktitle = {Level {Set} {Methods} and {Dynamic} {Implicit} {Surfaces}},
	publisher = {Springer Science \& Business Media},
	author = {Osher, Stanley and Fedkiw, Ronald},
	month = apr,
	year = {2006},
	note = {Google-Books-ID: i4bfBwAAQBAJ},
	keywords = {Computers / Optical Data Processing, Computers / Software Development \& Engineering / Computer Graphics, Mathematics / Counting \& Numeration, Mathematics / Numerical Analysis, Mathematics / Probability \& Statistics / Stochastic Processes, Science / Mechanics / General, Science / Mechanics / Solids, Technology \& Engineering / Mechanical},
	pages = {17--22},
}

@misc{vivo_fractal_nodate,
	title = {Fractal {Brownian} {Motion}},
	url = {https://thebookofshaders.com/13/},
	abstract = {Gentle step-by-step guide through the abstract and complex universe of Fragment Shaders.},
	urldate = {2024-04-29},
	journal = {The Book of Shaders},
	author = {Vivo, Patricio Gonzalez and Lowe, Jen},
}

@article{mandelbrot_fractional_1968,
	title = {Fractional {Brownian} {Motions}, {Fractional} {Noises} and {Applications}},
	volume = {10},
	issn = {0036-1445, 1095-7200},
	url = {http://epubs.siam.org/doi/10.1137/1010093},
	doi = {10.1137/1010093},
	language = {en},
	number = {4},
	urldate = {2024-05-09},
	journal = {SIAM Review},
	author = {Mandelbrot, Benoit B. and Van Ness, John W.},
	month = oct,
	year = {1968},
	pages = {422--437},
}

@misc{dunn_schlicks_nodate,
	title = {Schlick’s {Approximation}},
	url = {https://graphicscompendium.com/raytracing/11-fresnel-beer},
	urldate = {2024-05-04},
	journal = {Graphics Programming Compendium},
	author = {Dunn, Ian and Wood, Zoë},
}

@misc{iten_understanding_2018,
	title = {Understanding the {Fresnel} {Effect}},
	url = {https://www.dorian-iten.com/fresnel/},
	abstract = {Essential Drawing Lessons for Visual Artists},
	language = {en-US},
	urldate = {2024-05-04},
	author = {Iten, Dorian},
	month = dec,
	year = {2018},
}

@inproceedings{oat_animated_2007,
	address = {New York, NY, USA},
	series = {{SIGGRAPH} '07},
	title = {Animated wrinkle maps},
	isbn = {978-1-4503-1823-5},
	url = {https://dl.acm.org/doi/10.1145/1281500.1281667},
	doi = {10.1145/1281500.1281667},
	abstract = {An efficient method for rendering animated wrinkles on a human face is presented. This method allows an animator to independently blend multiple wrinkle maps across multiple regions of a textured mesh such as the female character shown in Figure 1. This method is both efficient in terms of computation as well as storage costs and is easily implemented in a real-time application using modern programmable graphics processors.},
	urldate = {2024-05-04},
	booktitle = {{ACM} {SIGGRAPH} 2007 courses},
	publisher = {Association for Computing Machinery},
	author = {Oat, Christopher},
	month = aug,
	year = {2007},
	pages = {33--37},
}

@misc{noauthor_rendering_2016,
	title = {Rendering 6, {Bumpiness}},
	url = {https://catlikecoding.com/unity/tutorials/rendering/part-6/},
	abstract = {A Unity Rendering tutorial about using normal maps to create the illusion of bumpiness. Part 6 of 20.},
	language = {en},
	urldate = {2024-05-04},
	journal = {Catlike Coding},
	month = jul,
	year = {2016},
}

@misc{noauthor_triplanar_2014,
	title = {Triplanar {Mapping}},
	url = {https://www.martinpalko.com/triplanar-mapping/},
	abstract = {Target Audience: Intermediate devs, comfortable creating materials and/or shaders in their chosen engine. Implementation Examples: Unity + UDK Last Updated: Jan 2014 Index: The Theory Drawbacks Implementation – Unity Implementation – UDK Uses The Theory…},
	language = {en-US},
	urldate = {2024-05-01},
	journal = {Martin Palko},
	month = mar,
	year = {2014},
}

@book{shirley_fundamentals_2018,
	edition = {4th edition},
	title = {Fundamentals of {Computer} {Graphics}},
	abstract = {Drawing on an impressive roster of experts in the field, Fundamentals of Computer Graphics, Fourth Edition offers an ideal resource for computer course curricula as well as a user-friendly personal or professional reference. Focusing on geometric intuition, the book gives the necessary information for understanding how images get onto the screen by using the complementary approaches of ray tracing and rasterization. It covers topics common to an introductory course, such as sampling theory, texture mapping, spatial data structure, and splines. It also includes a number of contributed chapters from authors known for their expertise and clear way of explaining concepts. Highlights of the Fourth Edition Include: Updated coverage of existing topics Major updates and improvements to several chapters, including texture mapping, graphics hardware, signal processing, and data structures A text now printed entirely in four-color to enhance illustrative figures of concepts The fourth edition of Fundamentals of Computer Graphics continues to provide an outstanding and comprehensive introduction to basic computer graphic technology and theory. It retains an informal and intuitive style while improving precision, consistency, and completeness of material, allowing aspiring and experienced graphics programmers to better understand and apply foundational principles to the development of efficient code in creating film, game, or web designs. Key Features Provides a thorough treatment of basic and advanced topics in current graphics algorithms Explains core principles intuitively, with numerous examples and pseudo-code Gives updated coverage of the graphics pipeline, signal processing, texture mapping, graphics hardware, reflection models, and curves and surfaces Uses color images to give more illustrative power to concepts},
	language = {English},
	publisher = {G},
	author = {Shirley, Peter and Marschner, Steve},
	month = jan,
	year = {2018},
}

@article{phong_illumination_1975,
	title = {Illumination for {Computer} {Generated} {Pictures}},
	volume = {18},
	abstract = {The quality of computer generated images of threedimensional scenes depends on the shading technique used to paint the objects on the cathode-ray tube screen. The shading algorithm itself depends in part on the method for modeling the object, which also determines the hidden surface algorithm. The various methods of object modeling, shading, and hidden surface removal are thus strongly interconnected. Several shading techniques corresponding to different methods of object modeling and the related hidden surface algorithms are presented here. Human visual perception and the fundamental laws of optics are considered in the development of a shading rule that provides better quality and increased realism in generated images.},
	language = {en},
	number = {6},
	author = {Phong, Bui Tuong},
	year = {1975},
}

@misc{perez-ortiz_practical_2017,
	title = {A practical guide and software for analysing pairwise comparison experiments},
	url = {http://arxiv.org/abs/1712.03686},
	doi = {10.48550/arXiv.1712.03686},
	abstract = {Most popular strategies to capture subjective judgments from humans involve the construction of a unidimensional relative measurement scale, representing order preferences or judgments about a set of objects or conditions. This information is generally captured by means of direct scoring, either in the form of a Likert or cardinal scale, or by comparative judgments in pairs or sets. In this sense, the use of pairwise comparisons is becoming increasingly popular because of the simplicity of this experimental procedure. However, this strategy requires non-trivial data analysis to aggregate the comparison ranks into a quality scale and analyse the results, in order to take full advantage of the collected data. This paper explains the process of translating pairwise comparison data into a measurement scale, discusses the benefits and limitations of such scaling methods and introduces a publicly available software in Matlab. We improve on existing scaling methods by introducing outlier analysis, providing methods for computing confidence intervals and statistical testing and introducing a prior, which reduces estimation error when the number of observers is low. Most of our examples focus on image quality assessment.},
	urldate = {2024-05-01},
	publisher = {arXiv},
	author = {Perez-Ortiz, Maria and Mantiuk, Rafal K.},
	month = dec,
	year = {2017},
	note = {arXiv:1712.03686 [cs, stat]},
	keywords = {Computer Science - Computer Vision and Pattern Recognition, Computer Science - Graphics, Statistics - Applications},
}

@misc{noauthor_object_nodate,
	title = {Object {Mouse} {Trackball} - {OpenGL} {Wiki}},
	url = {https://www.khronos.org/opengl/wiki/Object_Mouse_Trackball},
	urldate = {2024-05-01},
}

@misc{golus_normal_2019,
	title = {Normal {Mapping} for a {Triplanar} {Shader}},
	url = {https://bgolus.medium.com/normal-mapping-for-a-triplanar-shader-10bf39dca05a},
	abstract = {Triplanar mapping is a great solution for dealing with texturing on complex geometry that is difficult or impossible to use traditional UVs…},
	language = {en},
	urldate = {2024-04-30},
	journal = {Medium},
	author = {Golus, Ben},
	month = oct,
	year = {2019},
}

@article{dieker_simulation_2004,
	title = {Simulation of fractional {Brownian} motion},
	language = {en},
	author = {Dieker, Ton},
	year = {2004},
}

@misc{noauthor_value_nodate,
	title = {Value {Noise} and {Procedural} {Patterns}},
	url = {https://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/procedural-patterns-noise-part-1/introduction.html},
	urldate = {2024-04-29},
}

@article{lagae_survey_2010,
	title = {A {Survey} of {Procedural} {Noise} {Functions}},
	volume = {29},
	copyright = {© 2010 The Authors Computer Graphics Forum © 2010 The Eurographics Association and Blackwell Publishing Ltd.},
	issn = {1467-8659},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/j.1467-8659.2010.01827.x},
	doi = {10.1111/j.1467-8659.2010.01827.x},
	abstract = {Procedural noise functions are widely used in computer graphics, from off-line rendering in movie production to interactive video games. The ability to add complex and intricate details at low memory and authoring cost is one of its main attractions. This survey is motivated by the inherent importance of noise in graphics, the widespread use of noise in industry and the fact that many recent research developments justify the need for an up-to-date survey. Our goal is to provide both a valuable entry point into the field of procedural noise functions, as well as a comprehensive view of the field to the informed reader. In this report, we cover procedural noise functions in all their aspects. We outline recent advances in research on this topic, discussing and comparing recent and well-established methods. We first formally define procedural noise functions based on stochastic processes and then classify and review existing procedural noise functions. We discuss how procedural noise functions are used for modelling and how they are applied to surfaces. We then introduce analysis tools and apply them to evaluate and compare the major approaches to noise generation. We finally identify several directions for future work.},
	language = {en},
	number = {8},
	urldate = {2024-04-29},
	journal = {Computer Graphics Forum},
	author = {Lagae, A. and Lefebvre, S. and Cook, R. and DeRose, T. and Drettakis, G. and Ebert, D.s. and Lewis, J.p. and Perlin, K. and Zwicker, M.},
	year = {2010},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.1467-8659.2010.01827.x},
	keywords = {Gabor noise, I.3.3 Computer Graphics: Picture/Image Generation—I.3.7 Computer Graphics: Three-Dimensional Graphics and Realism-Colour, Perlin noise, and texture, anisotropic noise, anti-aliasing, filtering, noise, power spectrum estimation, procedural, procedural modelling, procedural noise function, procedural texture, shading, shadowing, solid noise, solid texture, sparse convolution noise, spectral analysis, spot noise, stochastic modelling, stochastic process, surface noise, texture synthesis, wavelet noise},
	pages = {2579--2600},
}

@article{paris_terrain_2019,
	title = {Terrain {Amplification} with {Implicit} {3D} {Features}},
	volume = {38},
	issn = {0730-0301},
	url = {https://dl.acm.org/doi/10.1145/3342765},
	doi = {10.1145/3342765},
	abstract = {While three-dimensional landforms, such as arches and overhangs, occupy a relatively small proportion of most computer-generated landscapes, they are distinctive and dramatic and have an outsize visual impact. Unfortunately, the dominant heightfield representation of terrain precludes such features, and existing in-memory volumetric structures are too memory intensive to handle larger scenes. In this article, we present a novel memory-optimized paradigm for representing and generating volumetric terrain based on implicit surfaces. We encode feature shapes and terrain geology using construction trees that arrange and combine implicit primitives. The landform primitives themselves are positioned using Poisson sampling, built using open shape grammars guided by stratified erosion and invasion percolation processes, and, finally, queried during polygonization. Users can also interactively author landforms using high-level modeling tools to create or edit the underlying construction trees, with support for iterative cycles of editing and simulation. We demonstrate that our framework is capable of importing existing large-scale heightfield terrains and amplifying them with such diverse structures as slot canyons, sea arches, stratified cliffs, fields of hoodoos, and complex karst cave networks.},
	number = {5},
	urldate = {2024-04-29},
	journal = {ACM Transactions on Graphics},
	author = {Paris, Axel and Galin, Eric and Peytavie, Adrien and Guérin, Eric and Gain, James},
	month = sep,
	year = {2019},
	keywords = {Procedural modeling, implicit surfaces, landscapes},
	pages = {147:1--147:15},
}

@inproceedings{helsing_noise_2015,
	address = {Cham},
	title = {Noise {Modeler}: {An} {Interactive} {Editor} and {Library} for {Procedural} {Terrains} via {Continuous} {Generation} and {Compilation} of {GPU} {Shaders}},
	isbn = {978-3-319-24589-8},
	shorttitle = {Noise {Modeler}},
	doi = {10.1007/978-3-319-24589-8_42},
	abstract = {In online procedural generation, content is generated as the game is running on the consumers computer. Our GPU-based Noise Modeler composites noise and other functions through a flow-graph editor similar to the ones used by procedural shader editors and offline terrain generators. Our framework enables non-programmers to edit models for procedural terrain while observing the effect of changes immediately in a real-time preview. Each time a change is made to the model, a corresponding GLSL shader function is automatically generated. The shader is then compiled, and used to render a real-time terrain preview.},
	language = {en},
	booktitle = {Entertainment {Computing} - {ICEC} 2015},
	publisher = {Springer International Publishing},
	author = {Helsing, Johan K. and Elster, Anne C.},
	editor = {Chorianopoulos, Konstantinos and Divitini, Monica and Baalsrud Hauge, Jannicke and Jaccheri, Letizia and Malaka, Rainer},
	year = {2015},
	keywords = {Online terrain generation, noise synthesis, real-time procedural content generation, stochastic implicit surface modeling},
	pages = {469--474},
}

@incollection{ebert_volumetric_2002,
	title = {Volumetric {Cloud} {Modeling} {With} {Implicit} {Functions}},
	isbn = {978-0-08-051875-6},
	language = {en},
	booktitle = {Texturing and {Modeling}: {A} {Procedural} {Approach}},
	publisher = {Elsevier},
	collaborator = {Ebert, David S. and Musgrave, F. Kenton and Peachey, Darwyn and Perlin, Ken and Worley, Steve},
	month = dec,
	year = {2002},
	note = {Google-Books-ID: fXp5UsEWNX8C},
	keywords = {Computers / Design, Graphics \& Media / CAD-CAM, Computers / Software Development \& Engineering / Computer Graphics},
	pages = {263--284},
}

@book{ebert_texturing_2002,
	title = {Texturing and {Modeling}: {A} {Procedural} {Approach}},
	isbn = {978-0-08-051875-6},
	shorttitle = {Texturing and {Modeling}},
	abstract = {The third edition of this classic tutorial and reference on procedural texturing and modeling is thoroughly updated to meet the needs of today's 3D graphics professionals and students. New for this edition are chapters devoted to real-time issues, cellular texturing, geometric instancing, hardware acceleration, futuristic environments, and virtual universes. In addition, the familiar authoritative chapters on which readers have come to rely contain all-new material covering L-systems, particle systems, scene graphs, spot geometry, bump mapping, cloud modeling, and noise improvements. There are many new spectacular color images to enjoy, especially in this edition's full-color format.As in the previous editions, the authors, who are the creators of the methods they discuss, provide extensive, practical explanations of widely accepted techniques as well as insights into designing new ones. New to the third edition are chapters by two well-known contributors: Bill Mark of NVIDIA and John Hart of the University of Illinois at Urbana-Champaign on state-of-the-art topics not covered in former editions.An accompanying Web site (www.texturingandmodeling.com) contains all of the book's sample code in C code segments (all updated to the ANSI C Standard) or in RenderMan shading language, plus files of many magnificent full-color illustrations.No other book on the market contains the breadth of theoretical and practical information necessary for applying procedural methods. More than ever, Texturing \& Modeling remains the chosen resource for professionals and advanced students in computer graphics and animation.*New chapters on: procedural real-time shading by Bill Mark, procedural geometric instancing and real-time solid texturing by John Hart, hardware acceleration strategies by David Ebert, cellular texturing by Steven Worley, and procedural planets and virtual universes by Ken Musgrave.*New material on Perlin Noise by Ken Perlin.*Printed in full color throughout.*Companion Web site contains revised sample code and dozens of images.},
	language = {en},
	publisher = {Elsevier},
	author = {Ebert, David S. and Musgrave, F. Kenton and Peachey, Darwyn and Perlin, Ken and Worley, Steve},
	month = dec,
	year = {2002},
	note = {Google-Books-ID: fXp5UsEWNX8C},
	keywords = {Computers / Design, Graphics \& Media / CAD-CAM, Computers / Software Development \& Engineering / Computer Graphics},
}

@article{haggstrom_real-time_2018,
	title = {Real-time rendering of volumetric clouds},
	language = {en},
	author = {Haggstrom, Fredrik},
	year = {2018},
}

@article{olsen_realtime_2004,
	title = {Realtime {Procedural} {Terrain} {Generation}},
	abstract = {The main goal of this paper is to provide an overview of a variety of methods for synthesis of eroded terrain for use in computer games, VR worlds and the like. Traditionally, such software uses either predeﬁned terrains or runtime generated data based on simple fractal noise techniques.},
	language = {en},
	author = {Olsen, Jacob},
	month = oct,
	year = {2004},
}

@article{lorensen_marching_1987,
	title = {Marching cubes: {A} high resolution {3D} surface construction algorithm},
	volume = {21},
	issn = {0097-8930},
	shorttitle = {Marching cubes},
	url = {https://dl.acm.org/doi/10.1145/37402.37422},
	doi = {10.1145/37402.37422},
	abstract = {We present a new algorithm, called marching cubes, that creates triangle models of constant density surfaces from 3D medical data. Using a divide-and-conquer approach to generate inter-slice connectivity, we create a case table that defines triangle topology. The algorithm processes the 3D medical data in scan-line order and calculates triangle vertices using linear interpolation. We find the gradient of the original data, normalize it, and use it as a basis for shading the models. The detail in images produced from the generated surface models is the result of maintaining the inter-slice connectivity, surface data, and gradient information present in the original 3D data. Results from computed tomography (CT), magnetic resonance (MR), and single-photon emission computed tomography (SPECT) illustrate the quality and functionality of marching cubes. We also discuss improvements that decrease processing time and add solid modeling capabilities.},
	number = {4},
	urldate = {2024-04-29},
	journal = {ACM SIGGRAPH Computer Graphics},
	author = {Lorensen, William E. and Cline, Harvey E.},
	month = aug,
	year = {1987},
	pages = {163--169},
}

@misc{geiss_chapter_nodate,
	title = {Chapter 1. {Generating} {Complex} {Procedural} {Terrains} {Using} the {GPU}},
	url = {https://developer.nvidia.com/gpugems/gpugems3/part-i-geometry/chapter-1-generating-complex-procedural-terrains-using-gpu},
	abstract = {Marching Cubes},
	language = {en-US},
	urldate = {2024-04-29},
	journal = {NVIDIA Developer},
	author = {Geiss, Ryan},
}

@article{hart_sphere_1995,
	title = {Sphere {Tracing}: {A} {Geometric} {Method} for the {Antialiased} {Ray} {Tracing} of {Implicit} {Surfaces}},
	volume = {12},
	shorttitle = {Sphere {Tracing}},
	doi = {10.1007/s003710050084},
	abstract = {Sphere tracing is a new technique for rendering implicit surfaces using geometric distance. Distance-based models are common in computer-aided geometric design and in the modeling of articulated figures. Given a function returning the distance to an object, sphere tracing marches along the ray toward its first intersection in steps guaranteed not to penetrate the implicit surface. Sphere tracing is particularly adept at rendering pathological surfaces. Creased and rough implicit surfaces are defined by functions with discontinuous or undefined derivatives. Current root finding techniques such as L-G surfaces and interval analysis require periodic evaluation of the derivative, and their behavior is dependent on the behavior of the derivative. Sphere tracing requires only a bound on the magnitude of the derivative, robustly avoiding problems Manuscript, July 1994. Recommended for publication: The Visual Computer. 5-70 where the derivative jumps or vanishes. This robustness and scope ...},
	journal = {The Visual Computer},
	author = {Hart, John},
	month = jun,
	year = {1995},
}
